{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","_this$props","this","props","col","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","react_default","a","createElement","id","concat","className","Component","dijkstra","grid","startNode","finishNode","visitedNodesInOrder","distance","unvisitedNodes","_step2","nodes","_iterator2","_createForOfIteratorHelper","s","n","done","_step3","value","_iterator3","node","push","err","e","f","getAllNodes","length","sortNodesByDistance","closestNode","shift","Infinity","isVisited","updateUnvisitedNeighbors","sort","nodeA","nodeB","_step","_iterator","neighbors","filter","neighbor","getUnvisitedNeighbors","previousNode","PathfindingVisualizer","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","mouseIsPressed","animating","getInitialGrid","setState","newGrid","getNewGridWithWallToggled","nodesInShortestPathOrder","_this2","_loop","i","setTimeout","animateShortestPath","v","document","getElementById","_ret","_this3","_loop2","enableButtons","disableButtons","currentNode","unshift","getNodesInShortestPathOrder","animateDijkstra","clearBtn","dijkstraBtn","disabled","j","_this4","_this$state","Fragment","onClick","visualizeDijkstra","clearBoard","map","rowIdx","key","nodeIdx","Node_Node_Node","handleMouseDown","handleMouseEnter","handleMouseUp","currentRow","createNode","slice","newNode","objectSpread","App","PathfindingVisualizer_PathfindingVisualizer_PathfindingVisualizer","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.01c97d25.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\nimport './Node.css';\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? 'node-finish'\r\n      : isStart\r\n      ? 'node-start'\r\n      : isWall\r\n      ? 'node-wall'\r\n      : '';\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp()}></div>\r\n    );\r\n  }\r\n}","export function dijkstra(grid, startNode, finishNode) {\r\n    const visitedNodesInOrder = [];\r\n    startNode.distance = 0;\r\n    const unvisitedNodes = getAllNodes(grid);\r\n    while (!!unvisitedNodes.length) {\r\n      sortNodesByDistance(unvisitedNodes);\r\n      const closestNode = unvisitedNodes.shift();\r\n\r\n      if (closestNode.isWall) continue;\r\n\r\n      if (closestNode.distance === Infinity) return visitedNodesInOrder;\r\n\r\n      closestNode.isVisited = true;\r\n      visitedNodesInOrder.push(closestNode);\r\n      if (closestNode === finishNode) return visitedNodesInOrder;\r\n      updateUnvisitedNeighbors(closestNode, grid);\r\n    }\r\n  }\r\n  \r\n  function sortNodesByDistance(unvisitedNodes) {\r\n    unvisitedNodes.sort((nodeA, nodeB) => nodeA.distance - nodeB.distance);\r\n  }\r\n  \r\n  function updateUnvisitedNeighbors(node, grid) {\r\n    const unvisitedNeighbors = getUnvisitedNeighbors(node, grid);\r\n    for (const neighbor of unvisitedNeighbors) {\r\n      neighbor.distance = node.distance + 1;\r\n      neighbor.previousNode = node;\r\n    }\r\n  }\r\n  \r\n  function getUnvisitedNeighbors(node, grid) {\r\n    const neighbors = [];\r\n    const {col, row} = node;\r\n    if (row > 0) neighbors.push(grid[row - 1][col]);\r\n    if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\r\n    if (col > 0) neighbors.push(grid[row][col - 1]);\r\n    if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\r\n    return neighbors.filter(neighbor => !neighbor.isVisited);\r\n  }\r\n  \r\n  function getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n      for (const node of row) {\r\n        nodes.push(node);\r\n      }\r\n    }\r\n    return nodes;\r\n  }\r\n  \r\n  export function getNodesInShortestPathOrder(finishNode) {\r\n    const nodesInShortestPathOrder = [];\r\n    let currentNode = finishNode;\r\n    while (currentNode !== null) {\r\n      nodesInShortestPathOrder.unshift(currentNode);\r\n      currentNode = currentNode.previousNode;\r\n    }\r\n    return nodesInShortestPathOrder;\r\n  }","import React, {Component} from 'react';\r\nimport Node from './Node/Node';\r\nimport {dijkstra, getNodesInShortestPathOrder} from '../algorithms/dijkstra';\r\nimport './PathfindingVisualizer.css';\r\n\r\nconst START_NODE_ROW = 10;\r\nconst START_NODE_COL = 15;\r\nconst FINISH_NODE_ROW = 10;\r\nconst FINISH_NODE_COL = 35;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      animating: false,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.animating) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid, mouseIsPressed: true});\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (this.state.animating) return;\r\n    if (!this.state.mouseIsPressed) return;\r\n    const newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  handleMouseUp() {\r\n    if (this.state.animating) return;\r\n    this.setState({mouseIsPressed: false});\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder) {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-visited';\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(nodesInShortestPathOrder) {\r\n    for (let i = 0; i < nodesInShortestPathOrder.length; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          'node node-shortest-path';\r\n          if(i === nodesInShortestPathOrder.length - 1){\r\n            this.enableButtons();\r\n            this.setState({animating: false});\r\n          }\r\n      }, 50 * i);\r\n    }\r\n  }\r\n\r\n  visualizeDijkstra() {\r\n    this.disableButtons();\r\n    this.setState({animating: true});\r\n    const {grid} = this.state;\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  }\r\n\r\n  disableButtons(){\r\n    var clearBtn = document.getElementById('clear');\r\n    var dijkstraBtn = document.getElementById('dijkstra');\r\n\r\n    clearBtn.disabled = true;\r\n    dijkstraBtn.disabled = true;\r\n  }\r\n\r\n  enableButtons(){\r\n    var clearBtn = document.getElementById('clear');\r\n    var dijkstraBtn = document.getElementById('dijkstra');\r\n\r\n    clearBtn.disabled = false;\r\n    dijkstraBtn.disabled = false;\r\n  }\r\n\r\n  clearBoard(){\r\n    const grid = getInitialGrid();\r\n    this.setState({grid});\r\n    \r\n    for(let i = 0; i < this.state.grid.length; i++){\r\n      for(let j = 0; j < this.state.grid[i].length; j++){\r\n        document.getElementById(`node-${i}-${j}`).className = 'node ';\r\n        if(this.state.grid[i][j].isWall === true){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-wall';\r\n        }\r\n        if(i === START_NODE_ROW && j === START_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-start';\r\n        }\r\n        if(i === FINISH_NODE_ROW && j === FINISH_NODE_COL){\r\n          document.getElementById(`node-${i}-${j}`).className = 'node node-finish';\r\n        }\r\n      }\r\n    }\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {grid, mouseIsPressed} = this.state;\r\n\r\n    return (\r\n      <>\r\n      <div className=\"button\">\r\n        \r\n      </div>\r\n      <div className=\"grid\">\r\n      <button id = \"dijkstra\" onClick={() => this.visualizeDijkstra()}>\r\n            Visualize Dijkstra's Algorithm\r\n        </button>\r\n      <button id = \"clear\" onClick={() => this.clearBoard()}>\r\n            Clear Board\r\n        </button>\r\n        {grid.map((row, rowIdx) => {\r\n          return (\r\n            <div key={rowIdx}>\r\n              {row.map((node, nodeIdx) => {\r\n                const {row, col, isFinish, isStart, isWall} = node;\r\n                return (\r\n                  <Node\r\n                    key={nodeIdx}\r\n                    col={col}\r\n                    isFinish={isFinish}\r\n                    isStart={isStart}\r\n                    isWall={isWall}\r\n                    mouseIsPressed={mouseIsPressed}\r\n                    onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                    onMouseEnter={(row, col) =>\r\n                      this.handleMouseEnter(row, col)\r\n                    }\r\n                    onMouseUp={() => this.handleMouseUp()}\r\n                    row={row}></Node>\r\n                );\r\n              })}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n    isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getNewGridWithWallToggled = (grid, row, col) => {\r\n  const newGrid = grid.slice();\r\n  const node = newGrid[row][col];\r\n\r\n  const newNode = {\r\n    ...node,\r\n    isWall: true,\r\n  };\r\n  newGrid[row][col] = newNode;\r\n  return newGrid;\r\n};","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}